// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = 16384 + 16384;
        return;
    }

     /** Returns if jth bit of x is 1 */

    function boolean bit(int x, int j){
        return ~((x & bitArray[j]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        int res = null;
        if (x-x = 0){
            let res = x;
        }
        else {
            let res = -x;
        }
        return res;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        int sum = 0;
        int shiftedX = x;
        int i = 0;
        while (i<16) {
            if (Math.bit(y,i)){
                let sum = sum + shiftedX;
             }
            let shiftedX = shiftedX*2;
            let i = i + 1;
        }
        return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q,result;
        var boolean pos;
        let pos = ((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x){
            return 0;
        }
        let q = Math.divide(x,y + y);

        if((x - (2 * q * y)) < y){
            let result = q + q;
        }
        else{
            let result = q + q + 1;
        }
        if(pos){
            return result;
        }
        else{
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,temp,tempQ;

        let y = 0;
        let j = 7;

        while(~(j < 0)){
            let temp = y + bitArray[j];
            let tempQ = temp * temp;
            //avoid overflow
            if(~(tempQ > x) & (tempQ > 0)){
                let y = temp;
            }
            let j = j - 1;
        }

        return y;
    }

     /** helper function: mod/
    function int mod(int a, int b){
        return x - (Math.divide(a,b) * b);
    }

    /** helper function two to the*/
    function int twoToThe(int i){
        return bitArray[i];
    }


    /** Returns the greater number. */
    function int max(int a, int b) {

        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        if(a < b){
            return a;
        }
        return b;
    }
}

