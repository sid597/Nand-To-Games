// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
     
    // Mux 1
    //Multiplexer for instruction and aluOutput
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=Mux1);

    // A register  
    Mux(a=true, b=instruction[5], sel=instruction[15], out=ARegisterLoadBit);
    ARegister(in=Mux1, load=ARegisterLoadBit, out=ARegisterOutput, out[0..14]= addressM);
    
    // D Register 
    And(a=instruction[4],b=instruction[15],out=DRegisterLoadBit);
    DRegister(in=aluOutput, load=DRegisterLoadBit, out=DRegisterOutput ); 

    // Mux 2
    // Multiplexer for ARegisterOutput and inM
    // Mux(a=false, b=instruction[12],sel=instruction[15], out=iOrALoadBit);
    And(a=instruction[12],b=instruction[15],out=aAndi);
    Mux16(a=ARegisterOutput, b=inM, sel=aAndi, out=Mux2);

    // writeM
    And(a=instruction[3],b=instruction[15],out=writeM);

    // ALU 
    ALU(x=DRegisterOutput, y=Mux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, zr=zro, ng=ngo,out=outM ); 

 
    
    // Program Counter
    
    Not(in=ngo,out=notng); // not ng
    Not(in=zro, out=notzr);
        And(a=instruction[15], b=instruction[0], out=j0);
    And(a=instruction[15], b=instruction[1], out=j1);
    And(a=instruction[15], b=instruction[2], out=j2);


    And(a=ngo, b=j2, out=JLT); // ng and j1
    And(a=zro, b=j1, out=JEQ); // zr and j2
    And(a=notng, b=j0, out=j0andnotng); // not ng and j3
    And(a=notzr, b=j0andnotng, out=JGT);
    
    Or(a=JGT,b=JLT,out=jump);    // j1 or j3
    Or(a=jump,b=JEQ,out=pcLoad); // j1 or j2 or j3

    
    PC(in=ARegisterOutput, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);

}